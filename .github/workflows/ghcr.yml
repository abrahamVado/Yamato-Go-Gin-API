# 1.- Publish container images for the API and worker to GitHub Container Registry.
name: Publish Containers

# 2.- Trigger on pushes to the default branch, version tags, and manual requests.
on:
  push:
    branches: ["main"]
    tags: ["v*.*.*", "v*.*", "v*"]
  workflow_dispatch:

# 3.- Share reusable settings across all jobs.
env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    # 4.- Build containers on the latest Ubuntu runner.
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    # 5.- Reuse the workflow for both API and worker images via a job matrix.
    strategy:
      matrix:
        component: [api, worker]

    steps:
      # 6.- Check out the repository code.
      - name: Checkout
        uses: actions/checkout@v4

      # 7.- Prepare QEMU to build multi-architecture images.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 8.- Enable BuildKit builders with caching across jobs.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 9.- Authenticate to GHCR using the GitHub Actions runtime token.
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 10.- Derive canonical image tags for the current ref and commit.
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }}
          tags: |
            type=sha
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}

      # 11.- Build and publish the selected target with provenance metadata disabled for compatibility.
      - name: Build and push ${{ matrix.component }} image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          target: ${{ matrix.component }}
          push: true
          provenance: false
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
