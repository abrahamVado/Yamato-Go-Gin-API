services:
  api:
    # Images pushed to GHCR should follow the pattern
    # ghcr.io/${GITHUB_REPOSITORY}/api:${GIT_SHA} alongside a stable tag
    # such as ghcr.io/${GITHUB_REPOSITORY}/api:latest for the default branch.
    build:
      context: .
      target: api
    image: ghcr.io/${GITHUB_REPOSITORY}/api:dev
    environment:
      PORT: "8080"
      DATABASE_URL: postgres://yamato:yamato@postgres:5432/yamato?sslmode=disable
      REDIS_ADDR: redis:6379
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8080/api/health || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5

  worker:
    # GHCR worker images follow the same convention as the API image above.
    build:
      context: .
      target: worker
    image: ghcr.io/${GITHUB_REPOSITORY}/worker:dev
    environment:
      DATABASE_URL: postgres://yamato:yamato@postgres:5432/yamato?sslmode=disable
      REDIS_ADDR: redis:6379
    depends_on:
      api:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: yamato
      POSTGRES_USER: yamato
      POSTGRES_PASSWORD: yamato
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U yamato -d yamato"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.52.0
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    volumes:
      - prometheus-data:/prometheus
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    depends_on:
      api:
        condition: service_healthy

volumes:
  postgres-data:
  prometheus-data:
